@inject BasicSettings basicSettings
@using Passingwind.Blog.Web.TagHelpers;

@{
}
@model PostsViewModel


@foreach (var post in Model.Posts)
{
    <div class="post-entry">
        <p class="post-title"><a asp-route="post" asp-route-slug="@post.Slug">@post.Title</a></p>

        <div class="post-meta clearfix text-secondary">
            <span>
                <time class="entry-date published" datetime="@post.PublishedTime.ToUniversalTime().ToString()"><span class="fa fa-clock-o"></span> @post.PublishedTime</time>
            </span>
            <span>
                <i class="fa fa-user-o"></i>
                <i class="post-by"><a asp-route="author" asp-route-author="@(post.User?.UserName)">@(post.User == null ? null : post.User.DisplayName)</a></i>
            </span>
            <span>
                <i class="fa fa-comment-o"></i>
                <a asp-route="post" asp-route-slug="@post.Slug" asp-fragment="comments">@post.CommentsCount Comments</a>
            </span>

            <partial name="_PostCategoriesPartial" model="post.Categories" />
            <partial name="_PostTagsPartial" model="post.Tags" />
        </div>
    </div>
}

<hr />

<pager total="Model.Posts.TotalCount" page-size="Model.Posts.PageSize" current-page="Model.Posts.PageNumber" item-warp-build="ItemWrap" tag-name="ul" page-item-class="page-link" pagination-class="pagination" first-page-show="Never" last-page-show="Never" previou-page-show="Never" next-page-show="Never" />

@functions {

    private TagBuilder ItemWrap(Microsoft.AspNetCore.Html.IHtmlContent content, bool active)
    {
        var tag = new TagBuilder("li");

        tag.InnerHtml.AppendHtml(content);
        tag.AddCssClass("page-item");

        return tag;
    }
}
